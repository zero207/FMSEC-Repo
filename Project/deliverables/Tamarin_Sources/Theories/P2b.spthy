theory P2b
/*
The following MAC-based challenge response protocol has to be  defined
A -> B: x
B -> A: y
A -> B: [y]_k(b,a)
B ->Â A: [x]_k(a,b)
*/
begin
functions: mac/2

rule Generate_shared_Key:
  [ Fr(~shared_kAB) ]
  -->
  [ !Ltk($A, $B, ~shared_kAB) ]

// necessary for the proofing lemmas
rule Reveal_ltk_A:
  [ !Ltk(A, B, shared_kAB) ]
  --[ Rev(A)]->
  [ Out(shared_kAB) ]

// necessary for the proofing lemmas
rule Reveal_ltk_B:
  [ !Ltk(A, B, shared_kAB) ]
  --[ Rev(B) ]->
  [ Out(shared_kAB) ]

// Protocol

// Initialize initiator A   
rule Init_A:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB) ]
  --[ INIT_A(A, B, shared_kAB) ]->
  [ St_A_0(A, B, ~id, shared_kAB) ]

// Initialize  responder B
rule Init_B:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB) ]
  --[ INIT_B(B, A, shared_kAB) ]->
  [ St_B_0(B, A, ~id, shared_kAB) ]

// A sends nonce x
rule A_0:
  [ Fr(~x)
  , St_A_0(A, B, ~id, shared_kAB) ]
  --[ OUT_A_0(A, B, ~x) ]->
  [ Out(~x)
  , St_A_1(A, B, ~id, ~x, shared_kAB) ]

// A receives nonce y
rule A_1:
  [ St_A_1(A, B, ~id, x, shared_kAB)
  ,In(y) ]
  --[IN_A_1(A, B, y)
  , Running(A, B, <'R','I', x, y>)
  , Honest(A)
  , Honest(B) ]->
  [ St_A_2(A, B, ~id, x, y, shared_kAB) ]

// A sends mac of y bounded with nonce x and identity 'I'
 rule A_2:
    let my = mac(<'I', y, x>, shared_kAB)  in
   [ St_A_2(A, B, ~id, x, y, shared_kAB) ]
   --[OUT_A_2(A, B, my) ]->
   [Out(my)
   ,St_A_3(A, B, ~id, x, y, shared_kAB)  ] 

// A receives mac of x bounded with R
rule A_3:
  let mx = mac(<x,'R'>, shared_kAB) in
  [ In(mx)
  , St_A_3(A, B, ~id, x, y, shared_kAB) ]
  --[ IN_A_3(A, B, mx)
    , DONE(A, B, x, y, shared_kAB)
    , Commit(A, B, <'I','R',x,y>)
    , Honest(A)
    , Honest(B) ]->
  []

// B receives nonce x
rule B_0:
  [ St_B_0(B, A, ~id, shared_kAB)
  , In(x) ]
  --[ IN_B_0(B, A, x) ]->
  [ St_B_1(B, A, ~id, x, shared_kAB) ]

// Generate nonce y
rule B_1:
  [ Fr(~y)
  ,St_B_1(B, A, x, ~id, shared_kAB) ]
  --[OUT_B_1(B, A, ~y)
  , Running(B, A, <'I','R', x, ~y>)
  , Honest(B)
  , Honest(A)
  ]->
  [ St_B_2(B, A, ~id, x, ~y, shared_kAB) ]

// B receives MAC of y bounded with x and I
rule B_2:
  let
    my = mac(<'I',y ,x>,shared_kAB)
  in
  [ St_B_2(B, A, ~id, x, y, shared_kAB)
  ,In(my) ]
  --[ IN_B_2(B,A,my)
  , Commit(B,A, <'R','I', x, y>)
  , Honest(B)
  , Honest(A)  
  ]->
  [ St_B_3(B, A, ~id, x, y, shared_kAB) ]

// B sends message mx (MAC of x bounded with R)
rule B_3:
  let 
    mx = mac(<'R',x>, shared_kAB) 
  in
  [ St_B_3(B, A, ~id, x, y, shared_kAB) ]
  --[ OUT_B_1(B, A, mx) ]->
  [ Out(mx) ]

// Lemmas

// it's executable
lemma executable:
  exists-trace
    "Ex A B x y k #i.
        DONE(A, B, x, y, k)@i
        & not (A = B)
        & not (Ex #k. Rev(A)@k) & not(Ex #k. Rev(B)@k)
        & not (Ex x y z u l m #p #q. INIT_A(x, y, l)@p & INIT_A(z, u, m)@q & not(#p = #q))
        & not (Ex x y z u l m #p #q. INIT_B(x, y, l)@p & INIT_B(z, u, m)@q & not(#p = #q))
        & not (Ex x y n l #i. DONE(x, y, n, n, l)@i)"
       

// Succeeds for I
lemma injectiveAgreement_I:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Rev(X)@r & Honest(X) @i)"
// Succeeds for R
lemma injectiveAgreement_R:
   "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Rev(X)@r & Honest(X) @i)"
end