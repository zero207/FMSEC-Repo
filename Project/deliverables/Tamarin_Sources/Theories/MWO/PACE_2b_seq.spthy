theory PACE_2b_seq
begin

functions: mac/2

/*
1. A -> B: x
2. B -> A: y
3. A -> B: ['A', x, y]_k(B,A)
4. B -> A: ['B', x, y]_k(A,B)
*/

// Shared key infrastructure rules

rule Register_shared_keys:
    [ Fr(~kAB), Fr(~kBA) ]
    -->
    [ !LtMac($A, $B, ~kAB, ~kBA) ]

rule Reveal_shk_A:
    [ !LtMac(A, B, kAB, kBA) ]
    --[ Rev(A) ]->
    [ Out(<kAB, kBA>) ]

  rule Reveal_shk_B:
    [ !LtMac(A, B, kAB, kBA) ]
    --[ Rev(B) ]->
    [ Out(<kAB, kBA>) ]

// Initialisation rules

//Initialise A
rule Initialise_A:
    [ Fr(~id), !LtMac(A, B, kAB, kBA) ]
    --[ Create_A(A, ~id, 'roleA') ]->
    [ St_A_1(A, ~id, B, kAB, kBA) ]

//Initialise B
rule Initialise_B:
    [ Fr(~id), !LtMac(A, B, kAB, kBA) ]
    --[ Create_B(B, ~id, 'roleB') ]->
    [ St_B_1(B, ~id, A, kAB, kBA) ]

// Protocol rules

//A sends message x
rule A_1_send:
    [ Fr(~x)
    , St_A_1(A, id, B, kAB, kBA) ]
    --[ Send(A, B, ~x) ]->
    [ St_A_2(A, id, B, kAB, kBA, ~x)
    , Out(~x) ]

//B receives message x
rule B_1_receive:
    [ St_B_1(B, id, A, kAB, kBA)
    , In(x) ]
    --[ Recv(B, A, x)]->
    [ St_B_2(B, id, A, kAB, kBA, x) ]

//B sends message y
rule B_2_send:
    [ Fr(~y)
    , St_B_2(B, id, A, kAB, kBA, x) ]
    --[ Send(B, A, ~y) ]->
    [ St_B_3(B, id, A, kAB, kBA, x, ~y)
    , Out(~y) ]

//A receives message y
rule A_2_receive:
    [ St_A_2(A, id, B, kAB, kBA, x)
    , In(y) ]
    --[ Recv(A, B, y)]->
    [ St_A_3(A, id, B, kAB, kBA, x, y) ]

//A sends message my (MAC of y)
rule A_3_send:
    let my = mac(kBA, <'A', x, y>) in
    [ St_A_3(A, id, B, kAB, kBA, x, y) ]
    --[ Send(A, B,  my)
    , Running(A, B, <'R', 'I', x, y>) ]->
    [ St_A_4(A, id, B, kAB, kBA, x, y), Out(my) ]

//B receives message my (MAC of y)
rule B_3_receive:
    let my = mac(kBA, <'A', x, y>) in
    [ St_B_3(B, id, A, kAB, kBA, x, y)
    , In(my) ]
    --[ Recv(B, A,  my) ]->
    [ St_B_4(B, id, A, kAB, kBA, x, y) ]

//B sends message mx (MAC of x)
rule B_3_send:
    let mx = mac(kAB, <'B', x, y>) in
    [ St_B_4(B, id, A, kAB, kBA, x, y) ]
    --[ Send(B, A,  mx)
    , Running(B, A, <'I', 'R', x, y>)
    , Commit(B, A, <'R', 'I', x, y>)
    , Honest(A)
    , Honest(B)
    , Finish(B) ]->
    [ St_B_5(B, id, A, kAB, kBA, x, y), Out(mx) ]

//A receives message mx (MAC of x)
rule A_4_receive:
    let mx = mac(kAB, <'B', x, y>) in
    [ St_A_4(A, id, B, kAB, kBA, x, y)
    , In(mx) ]
    --[ Recv(A, B,  mx)
      , Commit(A, B, <'I', 'R', x, y>)
      , Honest(A)
      , Honest(B)
      , Finish(A) ]->
    [ St_A_5(A, id, B, kAB, kBA, x, y) ]


// Lemmas

// succeeds
lemma executable:
  exists-trace
    "Ex A B   #i #j.
       Finish(A)@i & Finish(B)@j
       & (All Name1 Id1 Name2 Id2 #i #j. Create_A(Name1, Id1, 'roleA') @i & Create_A(Name2, Id2, 'roleA') @j ==> #i = #j)
       & (All Name1 Id1 Name2 Id2 #i #j. Create_B(Name1, Id1, 'roleB') @i & Create_B(Name2, Id2, 'roleB') @j ==> #i = #j)
       & not (A = B)
       & not (Ex X #k. Rev(X)@k)
    "

// fails
lemma nonInjectiveAgreementInitiator:
  "All a b t #i.
    Commit(a, b, <'I','R',t>)@i
    ==> (Ex #j. Running(b, a,<'I', 'R', t>)@j)
    | (Ex X #r. Rev(X)@r & Honest(X)@i)
"

// fails
lemma nonInjectiveAgreementResponder:
     "All a b t #i.
    Commit(a, b, <'R','I',t>)@i
    ==> (Ex #j. Running(b, a,<'R', 'I', t>)@j)
    | (Ex X #r. Rev(X)@r & Honest(X)@i)"

end
