theory OTR1
begin

builtins: signing, diffie-hellman

/*
1. A -> B: g^x, [g^x]_sk(A), pk(A)
2. B -> A: g^y, [g^y]_sk(B), pk(B)
*/

// Public key infrastructure

rule Reg_ltk:
  [ Fr(~sk) ]
  -->
  [ !Ltk($A, ~sk), !Pk($A, pk(~sk)), Out(pk(~sk)) ]

rule Reveal_ltk:
  [ !Ltk(A, k) ]
  --[ Rev(A) ]->
  [ Out(k) ]

// Initalisation rules

//Initialise A
rule Initialise_A:
  [ Fr(~id), !Ltk(A, skA), !Pk(B, pk(skB)) ]
  --[ Create_A(A, ~id, 'I') ]->
  [ St_A_1(A, ~id, skA, B, pk(skB)) ]

//Initialise B
rule Initialise_B:
  [ Fr(~id), !Ltk(B, skB),!Pk(A, pk(skA))  ]
  --[ Create_B(B, ~id, 'R') ]->
  [ St_B_1(B, ~id, skB, A, pk(skA)) ]


// Protocol

//A sends g^x and its public key to B
rule A_1_send:
  let msg = <'g'^~x, sign{'g'^~x}skA, pk(skA)> in
  [ Fr(~x)
  , St_A_1(A, id, skA, B, pk(skB)) ]
  --[ Send_I_1(A, B, msg) ]->
  [ St_A_2(A, id, skA, B, pk(skB), ~x), Out(msg) ]

/* B receives message containing a signed value
    and a public key */
rule B_1_receive:
  let msg = <X, sign{X}skA, pk(skA)> in
  [ St_B_1(B, id, skB, A, pk(skA))
  , In(msg) ]
  --[ Recv_R_1(B, A, msg) ]->
  [ St_B_2(B, id, skB, A, pk(skA), X) ]

//B sends g^y and its public key to A
rule B_2_send:
  let msg = <'g'^~y, sign{'g'^~y}skB, pk(skB)> in
  [ Fr(~y)
  , St_B_2(B, id, skB, A, pk(skA), X) ]
  --[ Send_R_2(B, A, msg)
  , Running(B, A, <'I', 'R', X^~y, pk(skB)>)
  , Honest(A)
  , Honest(B)
  , Finish(B) ]->
  [ St_B_3(B, id, skB, A, pk(skA), ~y, X), Out(msg) ]

/* A receives message containing a signed value
    and a public key */
rule A_2_receive:
  let msg = <Y, sign{Y}skB, pk(skB)> in
  [ St_A_2(A, id, skA, B, pk(skB), x)
  , In(msg) ]
  --[ Recv_I_2(A, B, msg)
  , Commit(A, B, <'I', 'R', Y^x, pk(skB)>)
  , Honest(A)
  , Honest(B)
  , Finish(A) ]->
  [ St_A_3(A, id, skA, B, pk(skB), x, Y) ]


// Lemmas

/// succeeds
lemma executable:
  exists-trace
    "Ex A B msg #i #j #p #q.
       Finish(A)@i & Finish(B)@j
       & Recv_I_2(A, B, msg)@p & Send_R_2(B, A, msg)@q
       & (All Name1 Id1 Name2 Id2 #i #j. Create_A(Name1, Id1, 'I') @i & Create_A(Name2, Id2, 'I') @j ==> #i = #j)
       & (All Name1 Id1 Name2 Id2 #i #j. Create_B(Name1, Id1, 'R') @i & Create_B(Name2, Id2, 'R') @j ==> #i = #j)
       & not (A = B)
       & not (Ex X #k. Rev(X)@k)
    "

end
