theory OTR3_B begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, pair/2, pk/1, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Reg_ltk:
   [ Fr( ~sk ) ]
  -->
   [ !Ltk( $A, ~sk ), !Pk( $A, pk(~sk) ), Out( pk(~sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, k ) ] --[ Rev( A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Initialise_A:
   [ Fr( ~id ), !Ltk( A, skA ), !Pk( B, pk(skB) ) ]
  --[ Create_A( A, ~id, 'I' ) ]->
   [ St_A_1( A, ~id, skA, B, pk(skB) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Initialise_B:
   [ Fr( ~id ), !Ltk( B, skB ), !Pk( A, pk(skA) ) ]
  --[ Create_B( B, ~id, 'R' ) ]->
   [ St_B_1( B, ~id, skB, A, pk(skA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_send:
   [ Fr( ~x ), St_A_1( A, id, skA, B, pk(skB) ) ]
  --[
  Send_I_1( A, B, <'g'^~x, sign(<'I', 'g'^~x, B>, skA), pk(skA)> ),
  Running( A, B, <'R', 'I', 'g'^~x, pk(skA)> )
  ]->
   [
   St_A_2( A, id, skA, B, pk(skB), ~x ),
   Out( <'g'^~x, sign(<'I', 'g'^~x, B>, skA), pk(skA)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_receive:
   [
   St_B_1( B, id, skB, A, pk(skA) ),
   In( <X, sign(<'I', X, B>, skA), pk(skA)> )
   ]
  --[
  Recv_R_1( B, A, <X, sign(<'I', X, B>, skA), pk(skA)> ),
  Commit( B, A, <'R', 'I', X, pk(skA)> ), Honest( A ), Honest( B )
  ]->
   [ St_B_2( B, id, skB, A, pk(skA), X ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_send:
   [ Fr( ~y ), St_B_2( B, id, skB, A, pk(skA), X ) ]
  --[
  Send_R_2( B, A, <'g'^~y, sign(<'R', 'g'^~y, A>, skB), pk(skB)> ),
  Running( B, A, <'I', 'R', 'g'^~y, pk(skB)> ), Secret( B, X^~y ),
  Honest( A ), Honest( B ), Finish( B )
  ]->
   [
   St_B_3( B, id, skB, A, pk(skA), ~y, X ),
   Out( <'g'^~y, sign(<'R', 'g'^~y, A>, skB), pk(skB)> )
   ]

  /*
  rule (modulo AC) B_2_send:
     [ Fr( ~y ), St_B_2( B, id, skB, A, pk(skA), X ) ]
    --[
    Send_R_2( B, A, <'g'^~y, sign(<'R', 'g'^~y, A>, skB), pk(skB)> ),
    Running( B, A, <'I', 'R', 'g'^~y, pk(skB)> ), Secret( B, z ),
    Honest( A ), Honest( B ), Finish( B )
    ]->
     [
     St_B_3( B, id, skB, A, pk(skA), ~y, X ),
     Out( <'g'^~y, sign(<'R', 'g'^~y, A>, skB), pk(skB)> )
     ]
    variants (modulo AC)
    1. ~y    = ~y.16
       X     = X.19
       z     = X.19^~y.16
    
    2. ~y    = ~y.23
       X     = z.33^inv(~y.23)
       z     = z.33
    
    3. ~y    = ~y.80
       X     = x.157^x.158
       z     = x.157^(~y.80*x.158)
    
    4. ~y    = ~y.83
       X     = x.163^inv((~y.83*x.164))
       z     = x.163^inv(x.164)
    
    5. ~y    = ~y.83
       X     = x.163^(x.164*inv(~y.83))
       z     = x.163^x.164
    
    6. ~y    = ~y.84
       X     = x.164^(x.165*inv((~y.84*x.166)))
       z     = x.164^(x.165*inv(x.166))
  */

rule (modulo E) A_2_receive:
   [
   St_A_2( A, id, skA, B, pk(skB), x ),
   In( <Y, sign(<'R', Y, A>, skB), pk(skB)> )
   ]
  --[
  Recv_I_2( A, B, <Y, sign(<'R', Y, A>, skB), pk(skB)> ),
  Commit( A, B, <'I', 'R', Y, pk(skB)> ), Secret( A, Y^x ),
  Honest( A ), Honest( B ), Finish( A )
  ]->
   [ St_A_3( A, id, skA, B, pk(skB), x, Y ) ]

  /*
  rule (modulo AC) A_2_receive:
     [
     St_A_2( A, id, skA, B, pk(skB), x ),
     In( <Y, sign(<'R', Y, A>, skB), pk(skB)> )
     ]
    --[
    Recv_I_2( A, B, <Y, sign(<'R', Y, A>, skB), pk(skB)> ),
    Commit( A, B, <'I', 'R', Y, pk(skB)> ), Secret( A, z ),
    Honest( A ), Honest( B ), Finish( A )
    ]->
     [ St_A_3( A, id, skA, B, pk(skB), x, Y ) ]
    variants (modulo AC)
     1. Y     = Y.12
        x     = one
        z     = Y.12
    
     2. Y     = Y.16
        x     = x.20
        z     = Y.16^x.20
    
     3. Y     = x.14^(x.15*x.16)
        x     = inv(x.15)
        z     = x.14^x.16
    
     4. Y     = z.14^x.17
        x     = inv(x.17)
        z     = z.14
    
     5. Y     = x.15^(x.16*x.17*inv(x.18))
        x     = (x.18*inv(x.16))
        z     = x.15^x.17
    
     6. Y     = x.15^(x.16*inv((x.17*x.18)))
        x     = (x.17*inv(x.16))
        z     = x.15^inv(x.18)
    
     7. Y     = z.15^(x.18*inv(x.19))
        x     = (x.19*inv(x.18))
        z     = z.15
    
     8. Y     = x.16^(x.17*x.18*inv((x.19*x.20)))
        x     = (x.19*inv(x.17))
        z     = x.16^(x.18*inv(x.20))
    
     9. Y     = x.17^x.18
        x     = inv((x.18*x.22))
        z     = x.17^inv(x.22)
    
    10. Y     = x.17^x.18
        x     = (x.22*inv(x.18))
        z     = x.17^x.22
    
    11. Y     = x.17^inv(x.18)
        x     = inv(x.22)
        z     = x.17^inv((x.18*x.22))
    
    12. Y     = x.17^inv(x.18)
        x     = (x.18*x.22)
        z     = x.17^x.22
    
    13. Y     = x.18^x.19
        x     = (x.23*inv((x.19*x.24)))
        z     = x.18^(x.23*inv(x.24))
    
    14. Y     = x.18^inv(x.19)
        x     = (x.23*inv(x.24))
        z     = x.18^(x.23*inv((x.19*x.24)))
    
    15. Y     = x.18^inv((x.19*x.20))
        x     = (x.19*x.24)
        z     = x.18^(x.24*inv(x.20))
    
    16. Y     = x.18^inv((x.19*x.20))
        x     = (x.19*inv(x.24))
        z     = x.18^inv((x.20*x.24))
    
    17. Y     = x.18^(x.19*x.20)
        x     = inv((x.19*x.24))
        z     = x.18^(x.20*inv(x.24))
    
    18. Y     = x.18^(x.19*x.20)
        x     = (x.24*inv(x.19))
        z     = x.18^(x.20*x.24)
    
    19. Y     = x.18^(x.19*inv(x.20))
        x     = inv(x.24)
        z     = x.18^(x.19*inv((x.20*x.24)))
    
    20. Y     = x.18^(x.19*inv(x.20))
        x     = inv((x.19*x.24))
        z     = x.18^inv((x.20*x.24))
    
    21. Y     = x.18^(x.19*inv(x.20))
        x     = (x.20*x.24)
        z     = x.18^(x.19*x.24)
    
    22. Y     = x.18^(x.19*inv(x.20))
        x     = (x.20*x.24*inv(x.19))
        z     = x.18^x.24
    
    23. Y     = x.18^(x.19*inv(x.20))
        x     = (x.20*inv((x.19*x.24)))
        z     = x.18^inv(x.24)
    
    24. Y     = z.18^inv(x.15)
        x     = x.15
        z     = z.18
    
    25. Y     = x.19^inv((x.20*x.21))
        x     = (x.20*x.25*inv(x.26))
        z     = x.19^(x.25*inv((x.21*x.26)))
    
    26. Y     = x.19^(x.20*x.21)
        x     = (x.25*inv((x.20*x.26)))
        z     = x.19^(x.21*x.25*inv(x.26))
    
    27. Y     = x.19^(x.20*x.21*inv(x.22))
        x     = inv((x.20*x.26))
        z     = x.19^(x.21*inv((x.22*x.26)))
    
    28. Y     = x.19^(x.20*x.21*inv(x.22))
        x     = (x.22*x.26*inv(x.20))
        z     = x.19^(x.21*x.26)
    
    29. Y     = x.19^(x.20*x.21*inv(x.22))
        x     = (x.22*inv((x.20*x.26)))
        z     = x.19^(x.21*inv(x.26))
    
    30. Y     = x.19^(x.20*inv(x.21))
        x     = (x.21*x.25*inv((x.20*x.26)))
        z     = x.19^(x.25*inv(x.26))
    
    31. Y     = x.19^(x.20*inv(x.21))
        x     = (x.25*inv(x.26))
        z     = x.19^(x.20*x.25*inv((x.21*x.26)))
    
    32. Y     = x.19^(x.20*inv(x.21))
        x     = (x.25*inv((x.20*x.26)))
        z     = x.19^(x.25*inv((x.21*x.26)))
    
    33. Y     = x.19^(x.20*inv((x.21*x.22)))
        x     = (x.21*x.26)
        z     = x.19^(x.20*x.26*inv(x.22))
    
    34. Y     = x.19^(x.20*inv((x.21*x.22)))
        x     = (x.21*x.26*inv(x.20))
        z     = x.19^(x.26*inv(x.22))
    
    35. Y     = x.19^(x.20*inv((x.21*x.22)))
        x     = (x.21*inv(x.26))
        z     = x.19^(x.20*inv((x.22*x.26)))
    
    36. Y     = x.19^(x.20*inv((x.21*x.22)))
        x     = (x.21*inv((x.20*x.26)))
        z     = x.19^inv((x.22*x.26))
    
    37. Y     = x.20^(x.21*x.22*inv(x.23))
        x     = (x.23*x.27*inv((x.21*x.28)))
        z     = x.20^(x.22*x.27*inv(x.28))
    
    38. Y     = x.20^(x.21*x.22*inv(x.23))
        x     = (x.27*inv((x.21*x.28)))
        z     = x.20^(x.22*x.27*inv((x.23*x.28)))
    
    39. Y     = x.20^(x.21*x.22*inv((x.23*x.24)))
        x     = (x.23*x.28*inv(x.21))
        z     = x.20^(x.22*x.28*inv(x.24))
    
    40. Y     = x.20^(x.21*x.22*inv((x.23*x.24)))
        x     = (x.23*inv((x.21*x.28)))
        z     = x.20^(x.22*inv((x.24*x.28)))
    
    41. Y     = x.20^(x.21*inv((x.22*x.23)))
        x     = (x.22*x.27*inv(x.28))
        z     = x.20^(x.21*x.27*inv((x.23*x.28)))
    
    42. Y     = x.20^(x.21*inv((x.22*x.23)))
        x     = (x.22*x.27*inv((x.21*x.28)))
        z     = x.20^(x.27*inv((x.23*x.28)))
    
    43. Y     = x.21^(x.22*x.23*inv((x.24*x.25)))
        x     = (x.24*x.29*inv((x.22*x.30)))
        z     = x.21^(x.23*x.29*inv((x.25*x.30)))
    
    44. Y     = x.25^x.26
        x     = x.17
        z     = x.25^(x.17*x.26)
    
    45. Y     = x.25^(x.26*inv(x.17))
        x     = x.17
        z     = x.25^x.26
    
    46. Y     = x.26^inv((x.18*x.28))
        x     = x.18
        z     = x.26^inv(x.28)
    
    47. Y     = x.27^(x.28*inv((x.19*x.30)))
        x     = x.19
        z     = x.27^(x.28*inv(x.30))
  */

lemma executable:
  exists-trace
  "∃ A B msg #i #j #p #q.
    (((((((Finish( A ) @ #i) ∧ (Finish( B ) @ #j)) ∧
         (Recv_I_2( A, B, msg ) @ #p)) ∧
        (Send_R_2( B, A, msg ) @ #q)) ∧
       (∀ Name1 Id1 Name2 Id2 #i.1 #j.1.
         ((Create_A( Name1, Id1, 'I' ) @ #i.1) ∧
          (Create_A( Name2, Id2, 'I' ) @ #j.1)) ⇒
         (#i.1 = #j.1))) ∧
      (∀ Name1 Id1 Name2 Id2 #i.1 #j.1.
        ((Create_B( Name1, Id1, 'R' ) @ #i.1) ∧
         (Create_B( Name2, Id2, 'R' ) @ #j.1)) ⇒
        (#i.1 = #j.1))) ∧
     (¬(A = B))) ∧
    (¬(∃ X #k. Rev( X ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ A B msg #i #j #p #q.
  (Finish( A ) @ #i) ∧
  (Finish( B ) @ #j) ∧
  (Recv_I_2( A, B, msg ) @ #p) ∧
  (Send_R_2( B, A, msg ) @ #q)
 ∧
  (∀ Name1 Id1 Name2 Id2 #i.1 #j.1.
    (Create_A( Name1, Id1, 'I' ) @ #i.1) ∧
    (Create_A( Name2, Id2, 'I' ) @ #j.1)
   ⇒
    #i.1 = #j.1) ∧
  (∀ Name1 Id1 Name2 Id2 #i.1 #j.1.
    (Create_B( Name1, Id1, 'R' ) @ #i.1) ∧
    (Create_B( Name2, Id2, 'R' ) @ #j.1)
   ⇒
    #i.1 = #j.1) ∧
  (¬(A = B)) ∧
  (∀ X #k. (Rev( X ) @ #k) ⇒ ⊥)"
*/
simplify
solve( St_A_2( A, id, skA, B, pk(skB), x ) ▶₀ #p )
  case A_1_send
  solve( St_B_2( $A.1, id.1, ~sk.1, $A, pk(skA), X ) ▶₁ #q )
    case B_1_receive
    solve( Finish( $A ) @ #i )
      case A_2_receive
      solve( St_A_2( $A, id, skA, B, pk(skB), x ) ▶₀ #i )
        case A_1_send
        solve( Finish( $A.1 ) @ #j )
          case B_2_send
          solve( St_B_2( $A.1, id.1, skB, A.2, pk(skA), X ) ▶₁ #j )
            case B_1_receive
            solve( !KU( sign(<'I', X, $A.1>, ~sk.2) ) @ #vk.8 )
              case A_1_send
              solve( !KU( sign(<'R', 'g'^~y, $A>, ~sk.1) ) @ #vk.4 )
                case B_2_send
                solve( !KU( pk(~sk.1) ) @ #vk.7 )
                  case B_2_send
                  solve( !KU( 'g'^~y ) @ #vk.7 )
                    case B_2_send
                    solve( !KU( pk(~sk) ) @ #vk.9 )
                      case A_1_send
                      solve( !KU( 'g'^~x ) @ #vk.9 )
                        case A_1_send
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma nonInjectiveAgreementInitiator:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_2_receive
  solve( St_A_2( a, id, skA, b, pk(skB), x ) ▶₀ #i )
    case A_1_send
    solve( !KU( sign(<'R', Y, $A>, ~sk.1) ) @ #vk.3 )
      case B_2_send
      by contradiction /* from formulas */
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.7 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma nonInjectiveAgreementResponder:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_1_receive
  solve( St_B_1( a, id, skB, b, pk(skA) ) ▶₀ #i )
    case Initialise_B
    solve( !KU( sign(<'I', X, $A>, ~sk.1) ) @ #vk.3 )
      case A_1_send
      by contradiction /* from formulas */
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.7 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma NonInjectiveAgreementInitiatorOld:
  all-traces
  "∀ A B t #i.
    ((((Commit( A, B, <'I', 'R', t> ) @ #i) ∧
       (∀ Name1 Id1 Name2 Id2 #i.1 #j.
         ((Create_A( Name1, Id1, 'I' ) @ #i.1) ∧
          (Create_A( Name2, Id2, 'I' ) @ #j)) ⇒
         (#i.1 = #j))) ∧
      (∀ Name1 Id1 Id2 #i.1 #j.
        ((Create_B( Name1, Id1, 'R' ) @ #i.1) ∧
         (Create_B( Name1, Id2, 'R' ) @ #j)) ⇒
        (#i.1 = #j))) ∧
     (¬(A = B))) ⇒
    ((∃ #j. Running( B, A, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. Rev( X ) @ #r))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Commit( A, B, <'I', 'R', t> ) @ #i)
 ∧
  (∀ Name1 Id1 Name2 Id2 #i.1 #j.
    (Create_A( Name1, Id1, 'I' ) @ #i.1) ∧
    (Create_A( Name2, Id2, 'I' ) @ #j)
   ⇒
    #i.1 = #j) ∧
  (∀ Name1 Id1 Id2 #i.1 #j.
    (Create_B( Name1, Id1, 'R' ) @ #i.1) ∧
    (Create_B( Name1, Id2, 'R' ) @ #j)
   ⇒
    #i.1 = #j) ∧
  (¬(A = B)) ∧
  (∀ #j. (Running( B, A, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Rev( X ) @ #r) ⇒ ⊥)"
*/
simplify
solve( Commit( A, B, <'I', 'R', t> ) @ #i )
  case A_2_receive
  solve( St_A_2( A, id, skA, B, pk(skB), x ) ▶₀ #i )
    case A_1_send
    solve( !KU( sign(<'R', Y, $A>, ~sk.1) ) @ #vk.3 )
      case B_2_send
      by contradiction /* from formulas */
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.7 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma InjectiveAgreementInitiator:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_2_receive
  solve( St_A_2( a, id, skA, b, pk(skB), x ) ▶₀ #i )
    case A_1_send
    solve( !KU( sign(<'R', Y, $A>, ~sk.1) ) @ #vk.3 )
      case B_2_send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', 'g'^~y, pk(~sk.1)> ) @ #i2 )
          case A_2_receive
          solve( St_A_2( a2, id.1, skA, b2, pk(~sk.1), x.1 ) ▶₀ #i2 )
            case A_1_send
            solve( !KU( sign(<'I', X, $A.1>, ~sk.3) ) @ #vk.10 )
              case A_1_send
              solve( !KU( sign(<'R', 'g'^~y, $A.2>, ~sk.1) ) @ #vk.12 )
                case B_2_send
                solve( !KU( pk(~sk.1) ) @ #vk.7 )
                  case A_1_send
                  solve( !KU( pk(~sk.3) ) @ #vk.9 )
                    case A_1_send
                    solve( !KU( 'g'^~y ) @ #vk.8 )
                      case B_2_send
                      solve( !KU( 'g'^~x.2 ) @ #vk.9 )
                        case A_1_send
                        SOLVED // trace found
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma InjectiveAgreementResponder:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_1_receive
  solve( St_B_1( a, id, skB, b, pk(skA) ) ▶₀ #i )
    case Initialise_B
    solve( !KU( sign(<'I', X, $A>, ~sk.1) ) @ #vk.3 )
      case A_1_send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'R', 'I', 'g'^~x, pk(~sk.1)> ) @ #i2 )
          case B_1_receive
          solve( St_B_1( a2, id.1, skB, b2, pk(~sk.1) ) ▶₀ #i2 )
            case Initialise_B
            solve( !KU( sign(<'I', 'g'^~x, $A.2>, ~sk.1) ) @ #vk.7 )
              case A_1_send
              solve( !KU( pk(~sk.1) ) @ #vk.4 )
                case A_1_send
                solve( !KU( 'g'^~x ) @ #vk.4 )
                  case A_1_send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_2_receive
  solve( St_A_2( A, id, skA, B, pk(skB), x ) ▶₀ #i )
    case A_1_send
    solve( !KU( sign(<'R', Y, $A>, ~sk.1) ) @ #vk.4 )
      case B_2_send
      solve( !KU( sign(<'I', X, $A.1>, ~sk.2) ) @ #vk.9 )
        case A_1_send
        solve( !KU( 'g'^(~x*~y) ) @ #vk.4 )
          case A_1_send
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_2_send
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      next
        case c_sign
        solve( !KU( ~sk.2 ) @ #vk.13 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.8 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_2_send
  solve( St_B_2( A, id, skB, A.1, pk(skA), X ) ▶₁ #i )
    case B_1_receive
    solve( !KU( sign(<'I', X, $A>, ~sk.1) ) @ #vk.4 )
      case A_1_send
      solve( !KU( 'g'^(~x*~y) ) @ #vk.1 )
        case A_1_send
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case B_2_send
        by solve( !KU( ~x ) @ #vk.6 )
      next
        case c_exp
        by solve( !KU( ~x ) @ #vk.8 )
      qed
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.8 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma forward_secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Rev( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Rev( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_2_receive
  solve( St_A_2( A, id, skA, B, pk(skB), x ) ▶₀ #i )
    case A_1_send
    solve( !KU( sign(<'R', Y, $A>, ~sk.1) ) @ #vk.4 )
      case B_2_send
      solve( !KU( sign(<'I', X, $A.1>, ~sk.2) ) @ #vk.9 )
        case A_1_send
        solve( !KU( 'g'^(~x*~y) ) @ #vk.4 )
          case A_1_send
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_2_send
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      next
        case c_sign
        solve( !KU( ~sk.2 ) @ #vk.13 )
          case Reveal_ltk
          by contradiction /* from formulas */
        qed
      qed
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.8 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_2_send
  solve( St_B_2( A, id, skB, A.1, pk(skA), X ) ▶₁ #i )
    case B_1_receive
    solve( !KU( sign(<'I', X, $A>, ~sk.1) ) @ #vk.4 )
      case A_1_send
      solve( !KU( 'g'^(~x*~y) ) @ #vk.1 )
        case A_1_send
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case B_2_send
        by solve( !KU( ~x ) @ #vk.6 )
      next
        case c_exp
        by solve( !KU( ~x ) @ #vk.8 )
      qed
    next
      case c_sign
      solve( !KU( ~sk.1 ) @ #vk.8 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end