theory OTR3_B
begin

builtins: signing, diffie-hellman

/*
1. A -> B: g^x, [I, g^x, B]_sk(A), pk(A)
2. B -> A: g^y, [R, g^y, A]_sk(B), pk(B)
*/

// Public key infrastructure

rule Reg_ltk:
  [ Fr(~sk) ]
  -->
  [ !Ltk($A, ~sk), !Pk($A, pk(~sk)), Out(pk(~sk)) ]

rule Reveal_ltk:
  [ !Ltk(A, k) ]
  --[ Rev(A) ]->
  [ Out(k) ]

// Initalisation rules

//Initialise A
rule Initialise_A:
  [ Fr(~id), !Ltk(A, skA), !Pk(B, pk(skB)) ]
  --[ Create_A(A, ~id, 'I') ]->
  [ St_A_1(A, ~id, skA, B, pk(skB)) ]

//Initialise B
rule Initialise_B:
  [ Fr(~id), !Ltk(B, skB),!Pk(A, pk(skA))  ]
  --[ Create_B(B, ~id, 'R') ]->
  [ St_B_1(B, ~id, skB, A, pk(skA)) ]

// Protocol

//A sends g^x, signs it and recipient and its public key to B
rule A_1_send:
  let msg = <'g'^~x, sign{<'I', 'g'^~x, B>}skA, pk(skA)> in
  [ Fr(~x)
  , St_A_1(A, id, skA, B, pk(skB)) ]
  --[ Send_I_1(A, B, msg)
   , Running(A, B, <'R', 'I', 'g'^~x, pk(skA)>) ]->
  [ St_A_2(A, id, skA, B, pk(skB), ~x), Out(msg) ]

/* B receives message containing a signed value
    and a public key */
rule B_1_receive:
  let msg = <X, sign{<'I', X, B>}skA, pk(skA)> in
  [ St_B_1(B, id, skB, A, pk(skA))
  , In(msg) ]
  --[ Recv_R_1(B, A, msg)
    , Commit(B, A, <'R', 'I', X, pk(skA)>)
    , Honest(A)
    , Honest(B) ]->
  [ St_B_2(B, id, skB, A, pk(skA), X) ]

//B sends g^y and its public key to A
rule B_2_send:
  let msg = <'g'^~y, sign{<'R', 'g'^~y, A>}skB, pk(skB)> in
  [ Fr(~y)
  , St_B_2(B, id, skB, A, pk(skA), X) ]
  --[ Send_R_2(B, A, msg)
  , Running(B, A, <'I', 'R', 'g'^~y, pk(skB)>)
  , Secret(B, X^~y)
  , Honest(A)
  , Honest(B)
  , Finish(B) ]->
  [ St_B_3(B, id, skB, A, pk(skA), ~y, X), Out(msg) ]

/* A receives message containing a signed value
    and a public key */
rule A_2_receive:
  let msg = <Y, sign{<'R', Y, A>}skB, pk(skB)> in
  [ St_A_2(A, id, skA, B, pk(skB), x)
  , In(msg) ]
  --[ Recv_I_2(A, B, msg)
  , Commit(A, B, <'I', 'R', Y, pk(skB)>)
  , Secret(A, Y^x)
  , Honest(A)
  , Honest(B)
  , Finish(A) ]->
  [ St_A_3(A, id, skA, B, pk(skB), x, Y) ]


// Lemmas

// succeeds
lemma executable:
  exists-trace
    "Ex A B msg #i #j #p #q.
       Finish(A)@i & Finish(B)@j
       & Recv_I_2(A, B, msg)@p & Send_R_2(B, A, msg)@q
       & (All Name1 Id1 Name2 Id2 #i #j. Create_A(Name1, Id1, 'I') @i & Create_A(Name2, Id2, 'I') @j ==> #i = #j)
       & (All Name1 Id1 Name2 Id2 #i #j. Create_B(Name1, Id1, 'R') @i & Create_B(Name2, Id2, 'R') @j ==> #i = #j)
       & not (A = B)
       & not (Ex X #k. Rev(X)@k)
    "

lemma nonInjectiveAgreementInitiator:
  "All a b t #i.
    Commit(a, b, <'I','R',t>)@i
    ==> (Ex #j. Running(b, a,<'I', 'R', t>)@j)
    | (Ex X #r. Rev(X)@r & Honest(X)@i)"

lemma nonInjectiveAgreementResponder:
     "All a b t #i.
    Commit(a, b, <'R','I',t>)@i
    ==> (Ex #j. Running(b, a,<'R', 'I', t>)@j)
    | (Ex X #r. Rev(X)@r & Honest(X)@i)"

lemma NonInjectiveAgreementInitiatorOld:
    "All A B t #i.
     Commit(A, B, <'I', 'R', t>)@i

//   And only one agent A
     & (All Name1 Id1 Name2 Id2 #i #j. Create_A(Name1, Id1, 'I') @i & Create_A(Name2, Id2, 'I') @j ==> #i = #j)

//   And only one agent B with the same name.
     & (All Name1 Id1 Id2 #i #j. Create_B(Name1, Id1, 'R') @i & Create_B(Name1, Id2, 'R') @j ==> #i =#j)

//  And different agents
     & not (A = B)
     ==> (Ex #j. Running(B, A,<'I', 'R', t>)@j)
                | (Ex X #r. Rev(X)@r)"


//fails

lemma InjectiveAgreementInitiator:
    "All a b t #i.
     Commit(a, b, <'I', 'R', t>)@i
     ==> (Ex #j. Running(b, a,<'I', 'R', t>)@j
     & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
     & not (#i2 = #i)))
          | (Ex X #r. Rev(X)@r & Honest(X) @i)"

lemma InjectiveAgreementResponder:
    "All a b t #i.
      Commit(a, b, <'R','I',t>)@i
      ==> (Ex #j. Running(b, a,<'R', 'I', t>)@j
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
              & not (#i2 = #i)))
          | (Ex X #r. Rev(X)@r & Honest(X) @i)"

// succeeds

lemma secrecy:
    "All A x #i.
      Secret(A, x) @i ==>
      not (Ex #j. K(x)@j)
          | (Ex X #r. Rev(X)@r & Honest(X) @i)"

lemma forward_secrecy:
    "All A x #i.
      Secret(A, x) @i ==>
      not (Ex #j. K(x)@j)
          | (Ex X #r. Rev(X)@r & Honest(X) @i & r < i)"


end
