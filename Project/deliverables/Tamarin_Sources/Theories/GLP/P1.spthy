theory P1
/*
The following MAC-based challenge response protocol has to be  defined
A -> B: x
B -> A: [x]_k(a,b)
*/
begin
functions: mac/2

rule Generate_shared_Key:
  [ Fr(~shared_kAB) ]
  -->
  [ !Ltk($A, $B, ~shared_kAB) ]

// necessary for the proofing lemmas
rule Reveal_ltk_A:
  [ !Ltk(A, B, shared_kAB) ]
  --[ Rev(A) ]->
  [ Out(shared_kAB) ]

// necessary for the proofing lemmas
rule Reveal_ltk_B:
  [ !Ltk(A, B, shared_kAB) ]
  --[ Rev(B) ]->
  [ Out(shared_kAB) ]

// Protocol

// Initialize initiator A   
rule Init_A:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB) ]
  --[ Create_A(A,~id,'roleA') ]->
  [ St_A_0(A, B, ~id, shared_kAB) ]

// Initialize  responder B
rule Init_B:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB) ]
  --[ Create_B(B, ~id, 'roleB') ]->
  [ St_B_0(B, A, ~id, shared_kAB) ]

// A sends nonce x as message
rule A_0:
  [ Fr(~x)
  , St_A_0(A, B, id, shared_kAB) ]
  --[ Send(A, B, ~x) ]->
  [ Out(~x)
  , St_A_1(A, B, id, ~x, shared_kAB) ]

// B receives message x
rule B_0:
  [ St_B_0(B, A, id, shared_kAB)
  , In(x) ]
  --[ Recv(B, A, x) ]->
  [ St_B_1(B, A, id, x, shared_kAB) ]

// B sends message m (MAC of x)
rule B_1:
  let 
    m = mac(x, shared_kAB) 
  in
  [ St_B_1(B, A, id, x, shared_kAB) ]
  --[ Send(B, A, m) 
  , Running(B,A,<'A','B',m>)
  , Honest(A)
  , Honest(B)]->
  [ Out(m) ]

// A receives message m (MAC of x)
rule A_1:
  let 
    m = mac(x, shared_kAB) 
  in
  [ In(m)
  , St_A_1(A, B, id, x, shared_kAB) ]
  --[ Recv(A, B, m)
    , Commit(A, B, <'A','B',m>)
    , Honest(A)
    , Honest(B) ]->
  []

// Lemmas

// it's executable
lemma executable:
  exists-trace
    "Ex A B m #i.
       Recv(A, B, m)@i
       & not (A = B)
       & not (Ex #k. Rev(A)@k) & not (Ex #k. Rev(B)@k)"

// satisfies authentication property that A injectively agrees with B on the nonce x
lemma injectiveAgreement:
  "All a b t #i. 
    Commit(a,b,<'A','B',t>) @i
    ==> (Ex #j. Running(b,a,<'A','B',t>) @j 
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Rev(X)@r & Honest(X) @i)"

end

end