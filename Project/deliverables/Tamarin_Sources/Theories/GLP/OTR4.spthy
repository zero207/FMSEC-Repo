theory OTR4
/*
1. A -> B: g^x
2. B -> A: g^y
3. A -> B: A, sign{g^y, g^x}pk(k),pk(k),mac(h(g^y^x), <'I',A>), pk(k)
4. B -> A: B, sign{g^y, g^x}pk(l),pk(k),mac(h(g^x^y), <'F',B>), pk(k)
*/

begin

builtins: signing, diffie-hellman, hashing, asymmetric-encryption
functions: mac/2
// Symmetric key infrastructure

rule Reg_ltk:
  [ Fr(~k) ]
  --[ Create($A) ]->
  [ !Ltk($A, ~k), !Pk($A, pk(~k)) ]

rule Reveal_ltk:
  [ !Ltk(A, k) ]
  --[ Rev(A) ]->
  [ Out(k) ]

// Initialize initiator A   

rule Init_A:
  [Fr(~idA) 
  ,!Ltk(A, k) ]
  --[ INIT_A(A, $B, k) ]->
  [ St_A_0(A, $B, ~idA, k) ]

// Send DFHK to B

rule A_0:
    [ Fr(~x)
    ,St_A_0(A, B, idA, k) ]
    --[Send(A, B, 'g'^~x)
    , Running(A, B, <'R', 'I', 'g'^~x>)
    , Honest(A)
    , Honest(B)]->
    [ Out('g'^~x)
    , St_A_1(A, B, idA, k, ~x) ]

// Receive B's key

rule A_1:
  [ St_A_1(A, B, idA, k, x)
  , In('g'^y) ]
  --[Â Recv(A, B, 'g'^y) ]->
  [ St_A_2(A, B, idA, k, x, 'g'^y) ]

// Send signed and MACed secret to B  

rule A_2:
  let
    msg = <A, sign(<'g'^y, 'g'^x>, pk(k)), mac(h('g'^y^x), <'I', A>), pk(k)>
  in
    [ St_A_2(A, B, idA,  k, x, 'g'^y) ]
    --[ Send(A, B, msg)
    , Out(msg) ]->
    [ St_A_3(A, B, idA, k, x, 'g'^y) ]

//Receive B's signed and MACed secret

rule A_3:
    let
      msg = <B, sign(<'g'^x, 'g'^y>, pk(l)), mac(h('g'^x^y), <'R', B>), pk(l)>
    in
  [  St_A_3(A, B, idA, k, x, 'g'^y)
  , In(msg)
  , !Pk(B, pk(l))]
  --[ Recv(A, B, msg)
  , Commit(A, B, <'I', 'R', 'g'^y>)
  , Honest(A)
  , Honest(B) ]->
  [ St_A_4(A, B, idA, k, x, 'g'^y, pk(l)) ]

// Initialize  responder B
rule Init_B:
  [Fr(~idB) 
  ,!Ltk(B, l) ]
  --[ INIT_B(B, $A, l) ]->
  [ St_B_0(B, $A, ~idB, l) ]

// Receive A's key

rule B_0:
  [ St_B_0(B, A, idB, l)
  , In('g'^x) ]
  --[ Recv(B, A, 'g'^x) ]->
  [ St_B_1(B, A, idB, l, 'g'^x) ]

// Send key to A

 rule B_1:
   [ Fr(~y)
  , St_B_1(B, A, idB, l, 'g'^x) ]
  --[ Send(B, A, 'g'^~y)
    , Running(B, A, <'I','R','g'^~y>)
    , Honest(B)
    , Honest(A) ]->
  [ Out('g'^~y)
  , St_B_2(B, A, idB, l, ~y, 'g'^x) ]

// Receive A's message

rule B_2:
  let
    msg = <A, sign(<'g'^y, 'g'^x>, pk(k)), mac(h('g'^y^x), <'I', A>), pk(k)>
  in
  [ St_B_2(B, A, idB, l, y, 'g'^x)
  , In(msg)
  , !Pk(A, pk(k)) ]
  --[ Recv(B, A, msg)
    , Commit(B, A, <'R','I','g'^x>)
    , Honest(B)
    , Honest(A) ]->
  [ St_B_3(B, A, idB, l, y, 'g'^x, pk(k)) ]

// Send message to A

rule B_3:
  let
    msg = <B, sign(<'g'^x, 'g'^y>, pk(l)), mac(h('g'^x^y), <'R', B>), pk(l)>
  in
  [ St_B_3(B, A, idB, l, y, 'g'^x, pk(k)) ]
  --[ Send(B, A, msg) ]->
  [ Out(msg)
  , St_B_4(B, A, idB, l, y, 'g'^x, pk(k)) ]

//Done
rule Done:
  [ St_A_4(A, B, idA, k, x, gy, pkl)
  , St_B_4(B, A, idB, l, y, gx, pkk) ]
  --[ DONE(A, B, k, l, x, y) ]->
  []

// Lemmas

// succeeds
lemma executable:
  exists-trace
    "Ex A B k l x y msg #j #p #q.
         DONE(A, B, k, l, x, y)@j
       & not (k = l)
       & not (A = B)
       & not (x = y)
       & Recv(A, B, msg)@p & Send(B, A, msg)@q
       & not (Ex #k. Rev(A)@k) & not (Ex #k. Rev(B)@k)
       & not (Ex x y z u l m #p #q. INIT_A(x, y, l)@p & INIT_A(z, u, m)@q & not(#p = #q))
       & not (Ex x y z u l m #p #q. INIT_B(x, y, l)@p & INIT_B(z, u, m)@q & not(#p = #q))
    "
// fails
lemma noninjectiveagreementINITIATOR:
  "All a b t #i.
    (Commit(a,b,<'I','R',t>) @i
    & not (Ex x y z l m #p #q. INIT_A(x, y, l)@p & INIT_A(x, z, m)@q & not(#p = #q))
    & not (Ex x y z l m #p #q. INIT_B(x, y, l)@p & INIT_B(x, z, m)@q & not(#p = #q))
    & not (a = b))
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
      | (Ex X #r. Rev(X)@r & Honest(X) @i)"

// succeeds
lemma noninjectiveagreementRESPONDER:
  "All a b t #i.
    (Commit(a,b,<'R','I',t>) @i
    & not (Ex x y z u l m #p #q. INIT_A(x, y, l)@p & INIT_A(z, u, m)@q & not(#p = #q))
    & not (Ex x y z l m #p #q. INIT_B(x, y, l)@p & INIT_B(x, z, m)@q & not(#p = #q))
    & not (Ex x #p #q. Create(x)@p & Create(x)@q & not(#p = #q))
    & not (a = b))
     ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
       | (Ex X #r. Rev(X)@r & Honest(X) @i)"

// succeeds
lemma noninjectiveagreementOLD:
  "All a b t #i.
     (Commit(a,b,<'I','R',t>) @i
     & not (Ex x y u v l #p #q. Send(x, y, l)@p & Recv(u, v, l)@q)
     & not (Ex x y u v l m n o #p #q. Send(x, y, <l,m>)@p & Send(u, v, <n,o>)@q & not(#p = #q) & not(n = l))
     & not (Ex x y z k #p #q.   INIT_A(x, y, k)@p & INIT_B(x, z, k)@q & not(#p = #q))
     & not (Ex x y z k l #p #q. INIT_B(x, y, k)@p & INIT_B(x, z, l)@q & not(#p = #q))
     & not (a = b))
     ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
       | (Ex X #r. Rev(X)@r)"
end