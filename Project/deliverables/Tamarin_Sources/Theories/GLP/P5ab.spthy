theory P5ab
/*
Extent the process of sending x with the high-entropy nonce s
A -> B: g^x, p, {s}h(k(A.B))
B -> A: g^y
A -> B: [g^y]_h(g^xy)
B -> A: [g^x]_h(g^yx)
*/
begin

builtins: hashing, symmetric-encryption, diffie-hellman
functions: mac/2,map/2

rule Generate_shared_Key:
  [ Fr(~shared_kAB)]
  -->
  [ !Ltk($A, $B, ~shared_kAB) ]

rule Reveal_ltk_A:
  [ !Ltk(A, B, shared_kAB) ]
  --[ Rev(A)]->
  [ Out(shared_kAB) ]

rule Reveal_ltk_B:
  [ !Ltk(A, B, shared_kAB) ]
  --[ Rev(B) ]->
  [ Out(shared_kAB) ]

// Protocol

// Initialize initiator A   
rule Init_A:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB) ]
  --[ Create_A(A, ~id, 'roleA') ]->
  [ St_A_0(A, B, ~id, shared_kAB, $p) ]

// Initialize  responder B
rule Init_B:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB) ]
  --[ Create_B(B, ~id, 'roleB') ]->
  [ St_B_0(B, A, ~id, shared_kAB) ]

// A sends message using DFHK
rule A_0:
  let
    g = map(~s, p)
  in
  [ Fr(~x)
  , Fr(~s)
  , St_A_0(A, B, id, shared_kAB, p) ]
  --[ Send(A, B, <g^~x, p, senc(~s, h(shared_kAB))>) ]->
  [ Out(<g^~x, p, senc(~s, h(shared_kAB))>)
  , St_A_1(A, B, id, p, ~x, ~s, shared_kAB) ]

// A receives B's y using DFHK
rule A_1:
  [ St_A_1(A, B, id, p, x, s, shared_kAB)
  ,In(Y) ]
  --[Recv(A, B, Y) ]->
  [ St_A_2(A, B, id, p, x, s, Y, shared_kAB) ]

// A sends message my mac of <'A', Y> with session key Kab
 rule A_2:
    let 
      g = map(s,p)
      Kab = h(Y^x)
      mY = mac(<'A', Y>, Kab)
    in
   [ St_A_2(A, B, id, p, x, s, Y, shared_kAB) ]
   --[Send(A, B, mY)
   , Running(A,B,<'R','I',g^x ,Y> )]->
   [Out(mY)
   ,St_A_3(A, B, id, p, x, s, Y, shared_kAB)  ] 

// A receives message mx --> mac of <'B', X> with session key Kab
rule A_3:
  let
    g = map(s,p) 
    Kab = h(Y^x)
    mX = mac(<'B',g^x>, Kab) 
  in
  [ In(mX)
  , St_A_3(A, B, id, p, x, s, Y, shared_kAB) ]
  --[ Recv(A, B, mX)
    , Commit(A, B, <'I','R', g^x, Y>)
    , Secret(A, Kab)
    , Honest(A)
    , Honest(B) ]->
  []

// B receives message from A
rule B_0:
  [ St_B_0(B, A, id, shared_kAB)
  , In(<X, p, senc(s, h(shared_kAB))>) ]
  --[ Recv(B, A, <X, p, senc(s, h(shared_kAB))>) ]->
  [ St_B_1(B, A, id, X, p, s, shared_kAB) ]

// B sends message g^y
rule B_1:
  let
    g = map(s, p)
  in
  [ Fr(~y)
  ,St_B_1(B, A, id, X, p, s, shared_kAB) ]
  --[Send(B, A, g^~y) ]->
  [ St_B_2(B, A, id, X, p, s, ~y, shared_kAB)
  , Out(g^~y) ]


  // B receives MAC of y -> mY
rule B_2:
  let
    g = map(s, p)
    Kab = h(X^y)
    mY = mac(Kab,<'A', g^y>)
  in
  [ St_B_2(B, A, id, p, X, s, y, shared_kAB)
  , In(mY) ]
  --[ Recv(B, A, mY)
  , Commit(B, A, <'R','I', X, g^y>)  ]->
  [St_B_3(B, A, id, X, p, s, y, shared_kAB) ]

// B sends message mX (MAC of x)
rule B_3:
  let 
    g = map(p, s)
    Kab = h(X^y)
    mX = mac(Kab,<'B', X>) 
  in
  [ St_B_3(B, A, id, X, p, s, y, shared_kAB) ]
  --[ Send(B, A, mX)
  , Running(B, A, <'I','R', X, g^y>)
  , Secret(B, Kab)
  , Honest(A)
  , Honest(B) ]->
  [ Out(mX) ]

// Lemmas

// succeeds
lemma executable:
  exists-trace
    "Ex A B mx my #i #j.
       Recv(A, B, mx)@i & Recv(B, A, my)@j
       & not (A = B)
       & not (Ex #k. Rev(A)@k) & not (Ex #k. Rev(B)@k)
    "
// succeeds
lemma injectiveAgreementInitiator:
  "All a b t #i.
    Commit(a, b, <'I','R',t>)@i
    ==> (Ex #j. Running(b, a,<'I', 'R', t>)@j
             & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
             & not (#i2 = #i)))
           | (Ex X #r. Rev(X)@r)"
// succeeds
lemma injectiveAgreementResponder:
  "All a b t #i.
    Commit(a, b, <'R','I',t>)@i
    ==> (Ex #j. Running(b, a,<'R', 'I', t>)@j
          & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
          & not (#i2 = #i)))
        | (Ex X #r. Rev(X)@r)"
// succeeds
lemma secrecy:
  "All A x #i.
    Secret(A,x) @i ==>
    not (Ex #j. K(x)@j)
        | (Ex X #r. Rev(X)@r & Honest(X) @i)"
// succeeds
lemma forward_secrecy:
  "All A x #i.
    Secret(A,x) @i ==>
    not (Ex #j. K(x)@j)
        | (Ex X #r. Rev(X)@r & Honest(X) @i & r < i)"
end