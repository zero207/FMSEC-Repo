theory P2a
/*
The following MAC-based challenge response protocol has to be  defined
A -> B: x
B -> A: y
A -> B: [y]_k(b,a)
B -> A: [x]_k(a,b)
*/
begin
functions: mac/2

rule Generate_shared_Key:
  [ Fr(~shared_kAB)
  , Fr(~shared_kBA)]
  -->
  [ !Ltk($A, $B, ~shared_kAB, ~shared_kBA) ]

// necessary for the proofing lemmas
rule Reveal_ltk_A:
  [ !Ltk(A, B, shared_kAB, shared_kBA) ]
  --[ Rev(A)]->
  [ Out(<shared_kAB,shared_kBA>) ]

// necessary for the proofing lemmas
rule Reveal_ltk_B:
  [ !Ltk(A, B, shared_kAB, shared_kBA) ]
  --[ Rev(B) ]->
  [ Out(<shared_kAB,shared_kBA>) ]

// Protocol

// Initialize initiator A   
rule Init_A:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB, shared_kBA) ]
  --[ Create_A(A, ~id, 'roleA') ]->
  [ St_A_0(A, B, ~id, shared_kAB, shared_kBA) ]

// Initialize  responder B
rule Init_B:
  [Fr(~id) 
  ,!Ltk(A, B, shared_kAB, shared_kBA) ]
  --[ Create_B(B, ~id, 'roleB') ]->
  [ St_B_0(B, A, ~id, shared_kAB, shared_kBA) ]

// A sends nonce x as message
rule A_0:
  [ Fr(~x)
  , St_A_0(A, B, id, shared_kAB, shared_kBA) ]
  --[ Send(A, B, ~x) ]->
  [ Out(~x)
  , St_A_1(A, B, id, ~x, shared_kAB, shared_kBA) ]

// A receives message y
rule A_1:
  [ St_A_1(A, B, id, x, shared_kAB, shared_kBA)
  ,In(y) ]
  --[Recv(A, B, y) ]->
  [ St_A_2(A, B, id, x, y, shared_kAB, shared_kBA) ]

// A sends mac(y)_k(a,b)
 rule A_2:
    let 
      my = mac(y, shared_kBA)  
    in
   [ St_A_2(A, B, id, x, y, shared_kAB, shared_kBA) ]
   --[Send(A, B, my)
   , Running(A,B,<'R','I',x ,y> )]->
   [Out(my)
   ,St_A_3(A, B, id, x, y, shared_kAB, shared_kBA)  ] 

// A receives mac(x)_k(a,b) -> mx
rule A_3:
  let 
    mx = mac(x, shared_kBA) 
  in
  [ In(mx)
  , St_A_3(A, B, id, x, y, shared_kAB, shared_kBA) ]
  --[ Recv(A, B, mx)
    , Commit(A, B, <'I','R',x,y>) ]->
  []

// Generate message y
rule B_0:
  [ Fr(~y)
  ,St_B_0(B, A, id, shared_kAB, shared_kBA) ]
  --[Send(B, A, ~y) ]->
  [ St_B_1(B, A, id, ~y, shared_kAB, shared_kBA) ]

// B receives message x
rule B_1:
  [ St_B_1(B, A, id, y, shared_kAB, shared_kBA)
  , In(x) ]
  --[ Recv(B, A, x) ]->
  [ St_B_2(B, A, id, x, y, shared_kAB, shared_kBA) ]

// B sends message mx (MAC of x)
rule B_2:
  let 
    mx = mac(x, shared_kAB) 
  in
  [ St_B_2(B, A, id, x, y, shared_kAB, shared_kBA) ]
  --[ Send(B, A, mx)
  , Running(B,A, <'R','I', x, y>) ]->
  [ Out(mx)
  , St_B_3(B, A, id, x, y, shared_kAB, shared_kBA) ]

// B receives MAC of y -> my
rule B_3:
  let
    my = mac(y,shared_kBA)
  in
  [ St_B_3(B, A, id, x, y, shared_kAB, shared_kBA)
  ,In(my) ]
  --[ Recv(B,A,my)
  , Commit(B,A, <'R','I', x, y>) ]->
  [ ]

// Lemmas

// it's executable
lemma executable:
  exists-trace
    "Ex A B mx my #i #j.
       Recv(A, B, mx)@i & Recv(B, A, my)@j
       & not (A = B)
       & not (Ex #k. Rev(A)@k) & not (Ex #k. Rev(B)@k)
    "
       

// fails
lemma nonInjectiveAgreementI:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
      | (Ex X #r. Rev(X)@r)
  "

lemma nonInjectiveAgreementR:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
      | (Ex X #r. Rev(X)@r)
  "

end