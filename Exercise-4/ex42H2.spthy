theory Ex42H2
begin

builtins: signing

// pre-shared key distribution
rule Register_pk:
  [ Fr(~ltkA) ]
  --[ Register($A) ]->
  [ !Ltk($A, ~ltkA), Out(pk(~ltkA))] 

rule Reveal_ltk:
  [ !Ltk(A, ltkA) ] --[ Reveal(A) ]-> [ Out(ltkA) ]

/* We formalize the following protocol
  protocol {
    1. A -> B: {A,B}sk(A)  /// add an Na that will not be used, maybe add Nb to the response
    1. A <- B: {A}sk(B)
  }
*/

rule Init_A:
  [ Fr(~id)
  , !Ltk(I, ltkI), !Ltk(R, ltkR)
  ]
--[ Create_A(I, ~id) ]->
  [ St_A_1(I, ~id, ltkI, pk(ltkR), R)
  ]

rule Init_B:
  [ Fr(~id)
  , !Ltk(R, ltkR), !Ltk(I, ltkI)
  ]
--[ Create_B(R, ~id) ]->
  [ St_B_1(R, ~id, ltkR, pk(ltkI), I)
  ]

rule A_1_send:
  let mA1 = sign{I,R}ltkI
  in
  [ St_A_1(I, ~id, ltkI, pkltkR, R)
  ]
--[ Send(I, mA1)
  , Running(I, R, 'anyroles')  // relevant for weak agreement only, as the roles are not taken into account
  ]->
  [ St_A_2(I, ~id, ltkI, pkltkR, R) 
  , Out(mA1)
  ]

rule B_1_receive:
  let mB1 = sign{I,R}ltkI
  in
  [ St_B_1(R, ~id, ltkR, pk(ltkI), I)
  , In(mB1)
  ]
--[ Recv(R, mB1) 
  ]->
  [ St_B_2(R, ~id, ltkR, pk(ltkI), I)
  ]

rule B_2_send:
  let mB2 = sign{I}ltkR
  in
  [ St_B_2(R, ~id, ltkR, pkltkI, I)
  ] 
--[ Send(R, mB2)
  , Running(R, I, <'Init', 'Resp'>) 
  ]->
  [ St_B_3(R, ~id, ltkR, pkltkI, I)
  , Out(mB2)
  ]

rule A_2_receive:
  let mA2 = sign{I}ltkR
  in
  [ St_A_2(I, ~id, ltkI, pk(ltkR), R) 
  , In(mA2)
  ]
--[ Receive(I, mA2)
  , Commit(I, R, <'Init', 'Resp'>) 
  , Honest(I), Honest(R)
  , Finish()
  ]->
  [ St_A_3(I, ~id, ltkI, pk(ltkR), R) 
  ]


// Executability
// To obtain the intended MSC, we need to explicitly add a constraint:
// - there is only one initiator thread
// Shows the inteded MSC.
lemma executable:
  exists-trace
    "Ex #i. 
	Finish() @i & 
	not (Ex I1 I2 id1 id2 #j #k. Create_A(I1, id1)@j & Create_A(I2, id2)@k & not (#j = #k)) & 
	not (Ex A #j. Reveal(A)@j)
    "


// Injective agreement from the perspective of  the initiator.
// fails
lemma injective_agree:
  " /* Whenever somebody commits to running a session, then*/
    All actor peer params #i.
        Commit(actor, peer, params) @ i
      ==>
        /* there is somebody running a session with the same parameters */
          (Ex #j. Running(peer, actor, params) @ j & j < i
            /* and there is no other commit on the same parameters */
            & not(Ex actor2 peer2 #i2.
                    Commit(actor2, peer2, params) @ i2 & not(#i = #i2)
                 )
          )
        /* or the adversary perform a long-term key reveal on assumed honest participant */
        | (Ex X #r. Reveal(X) @ r & Honest(X) @i)
  "


// Non-Injective agreement from the perspective of the initiator.
// holds
lemma noninjective_agree:
  " /* Whenever somebody commits to running a session, then*/
    All actor peer params #i.
        Commit(actor, peer, params) @ i
      ==>
        /* there is somebody running a session with the same parameters */
          (Ex #j. Running(peer, actor, params) @ j
          )
        /* or the adversary perform a long-term key reveal on assumed honest participant */
        | (Ex X #r. Reveal(X) @ r & Honest(X) @i)
  "


// Weak agreement 
//
// Note: This property does not constrain the roles played by the actor and the peer.
// We therefore have to add a running claim also into the initiator role (see rule A_1_send above).
// Instead of adding additional Commit/Running claims with empty third arguments, we allow the third 
// arguments to be unrelated (see t1 and t2 below). 
//
// Holds. 
lemma weakagree:
   "/* Whenever sombody commits to running a session, then*/
    All A B t1 #i. 
	Commit(A, B, t1) @ i
     ==> 
        /* there is somebody running a session with matching participants */
	  (Ex t2 #j. Running(B, A, t2) @j)

        /* or the adversary perform a long-term key reveal on assumed honest participant */
      	| (Ex X #r. Reveal(X) @ r & Honest(X) @ i)"


restriction onekeypername:
  "All A #i #j. Register(A)@i & Register(A)@j ==> #i = #j"

end
